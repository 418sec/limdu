/**
 * Static Utilities for writing files in ARFF format.
 *
 * @note for READING files in ARFF format, see https://github.com/chesles/node-arff
 * 
 * @author Erel Segal-Halevi
 * @since 2013-08
 */


var _ = require('underscore')._;
var features = new require('../features');

/**
 * @param dataset an array of samples in the format {input: {feature1: xxx, feature2: yyy, ...}, output: [1,2,3]}
 * @return an ARFF file. 
 */
exports.toARFF = function(dataset, relationName) {
	var arff = "% Automatically generated by Node.js\n";
	arff += "@relation "+relationName+"\n";
	
	var featureLookupTable = new features.FeatureLookupTable();
	
	// Extract the input attributes (- features):
	dataset.forEach(function(datum) {
		featureLookupTable.addFeatures(datum.input);
	});
	
	// Extract the target attributes (- classes):
	dataset.forEach(function(datum) {
		featureLookupTable.addFeatures(datum.output);
	});

	//console.dir(featureLookupTable);

	featureLookupTable.featureIndexToFeatureName.forEach(function(featureName) {
		if (!featureName) arff += "@attribute undefined {0,1}"+"\n";
		else arff += "@attribute "+featureName.replace(/ /g, "_")+" "+"{0,1}"+"\n";
	});

	arff += "\n@data\n";
	
	dataset.forEach(function(datum) {
		var datumArff = _(datum.input).clone();
		for (var i=0; i<datum.output.length; ++i)
			datumArff[datum.output[i]]=1;
		//console.dir(datumArff);
		var array = featureLookupTable.hashToArray(datumArff);
		arff += array + "\n";
	});

	return arff;
}

/**
 * Load a trained classifier from a string.
 * @param string a string created by serialize.toString.
 * @param contextFolderForFunction  the base folder for the "require" statements in the create-new-classifier function.
 */
exports.fromString = function(string, contextFolderForFunction) {
	var json = JSON.parse(string);
	if (!json.createNewClassifierString) {
		console.dir(json);
		throw new Error("Cannot find createNewClassifierString in string");
	}
	
	// add context to the 'require' statements:
	contextFolderForFunction = contextFolderForFunction.replace(/\\/g, "\\\\");   // for Windows
	var createNewClassifierString = json.createNewClassifierString.replace(/__dirname/g, "'"+contextFolderForFunction+"'");
	createNewClassifierString = "("+createNewClassifierString+")";
	var createNewClassifierFunction = eval(createNewClassifierString);
	try {
		var newClassifier = createNewClassifierFunction();
	} catch (error) {
		console.log("createNewClassifierString: "+createNewClassifierString);
		console.log("contextFolderForFunction: "+contextFolderForFunction);
		throw new Error("Error in creating new classifier from function in string: "+error);
	}
	
	if (!newClassifier) {
		console.dir(json);
		throw new Error("Cannot create new classifier from function in string");
	}
	newClassifier.createNewClassifierString = json.createNewClassifierString;
	newClassifier.createNewClassifierFunction = createNewClassifierFunction;
	return newClassifier.fromJSON(json.trainedClassifier);
}


